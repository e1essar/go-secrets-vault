// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/vault.proto

package vaultpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Vault_Store_FullMethodName    = "/vault.Vault/Store"
	Vault_Retrieve_FullMethodName = "/vault.Vault/Retrieve"
	Vault_Rotate_FullMethodName   = "/vault.Vault/Rotate"
)

// VaultClient is the client API for Vault service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VaultClient interface {
	Store(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*SecretID, error)
	Retrieve(ctx context.Context, in *SecretID, opts ...grpc.CallOption) (*Secret, error)
	Rotate(ctx context.Context, in *SecretID, opts ...grpc.CallOption) (*Secret, error)
}

type vaultClient struct {
	cc grpc.ClientConnInterface
}

func NewVaultClient(cc grpc.ClientConnInterface) VaultClient {
	return &vaultClient{cc}
}

func (c *vaultClient) Store(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*SecretID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecretID)
	err := c.cc.Invoke(ctx, Vault_Store_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultClient) Retrieve(ctx context.Context, in *SecretID, opts ...grpc.CallOption) (*Secret, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Secret)
	err := c.cc.Invoke(ctx, Vault_Retrieve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultClient) Rotate(ctx context.Context, in *SecretID, opts ...grpc.CallOption) (*Secret, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Secret)
	err := c.cc.Invoke(ctx, Vault_Rotate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VaultServer is the server API for Vault service.
// All implementations must embed UnimplementedVaultServer
// for forward compatibility.
type VaultServer interface {
	Store(context.Context, *Secret) (*SecretID, error)
	Retrieve(context.Context, *SecretID) (*Secret, error)
	Rotate(context.Context, *SecretID) (*Secret, error)
	mustEmbedUnimplementedVaultServer()
}

// UnimplementedVaultServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVaultServer struct{}

func (UnimplementedVaultServer) Store(context.Context, *Secret) (*SecretID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedVaultServer) Retrieve(context.Context, *SecretID) (*Secret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedVaultServer) Rotate(context.Context, *SecretID) (*Secret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rotate not implemented")
}
func (UnimplementedVaultServer) mustEmbedUnimplementedVaultServer() {}
func (UnimplementedVaultServer) testEmbeddedByValue()               {}

// UnsafeVaultServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VaultServer will
// result in compilation errors.
type UnsafeVaultServer interface {
	mustEmbedUnimplementedVaultServer()
}

func RegisterVaultServer(s grpc.ServiceRegistrar, srv VaultServer) {
	// If the following call pancis, it indicates UnimplementedVaultServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Vault_ServiceDesc, srv)
}

func _Vault_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Secret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vault_Store_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).Store(ctx, req.(*Secret))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vault_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vault_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).Retrieve(ctx, req.(*SecretID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vault_Rotate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).Rotate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vault_Rotate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).Rotate(ctx, req.(*SecretID))
	}
	return interceptor(ctx, in, info, handler)
}

// Vault_ServiceDesc is the grpc.ServiceDesc for Vault service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vault_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vault.Vault",
	HandlerType: (*VaultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Store",
			Handler:    _Vault_Store_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _Vault_Retrieve_Handler,
		},
		{
			MethodName: "Rotate",
			Handler:    _Vault_Rotate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/vault.proto",
}
